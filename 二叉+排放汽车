#include <bits/stdc++.h>
using namespace std;

double minv = 10000;

void dfs(vector<double> &nums, int depth, double sum, double minv1) {
    // 检查是否已经达到数组末尾
    if (depth >= nums.size()) {
        minv = min(max(minv1, sum - minv1), minv);
        return; // 结束递归
    }


    // 深度优先搜索两种情况
    if (minv1 + nums[depth] <= 15) {
        // 选择当前元素
        dfs(nums, depth + 1, sum, minv1 + nums[depth]);
    }
    // 不选择当前元素
    dfs(nums, depth + 1, sum, minv1);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<double> nums;
        double sum = 0.0;

        // 输入每个车辆的数据
        for (int i = 0; i < n; ++i) {
            double car;
            cin >> car;
            sum += car;
            nums.push_back(car);
        }

        minv = 10000; // 刷新 minv
        dfs(nums, 0, sum, 0);
        cout << fixed << setprecision(1) << minv << endl;
    }
    return 0;
}
