class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();  
    if (n <= 1) return;  

    // Step 1: Find the longest non-increasing suffix  
    int i = n - 2;  
    while (i >= 0 && nums[i] >= nums[i + 1]) {  
        i--;  
    }  

    // Step 2: If we find such an index i, find the smallest element  
    // in the suffix that is larger than nums[i].  
    if (i >= 0) {  
        int j = n - 1;  
        while (nums[j] <= nums[i]) {  
            j--;  
        }  
        // Step 3: Swap the found elements  
        swap(nums[i], nums[j]);  
    }  

    // Step 4: Reverse the suffix  
    reverse(nums.begin() + i + 1, nums.end());  

    }
};
