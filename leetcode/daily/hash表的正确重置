class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {

        for (int i = 0 ; i < 9 ; i++){
            unordered_map<int , int>hash;
            for (int j = 0 ; j < 9 ; j++){
                if (board[i][j]!='.'){
                    hash[board[i][j]-'0']++;
                    if (hash[board[i][j]-'0']>=2){
                        return false;
                    }
                }
            }
        }
       
        for (int i = 0 ; i < 9 ; i++){
            unordered_map<int , int>hash;
            for (int j = 0 ; j < 9 ; j++){
                if (board[j][i]!='.'){
                    hash[board[j][i]-'0']++;
                    if (hash[board[j][i]-'0']>=2){
                        return false;
                    }
                }
            }
        }
        
        unordered_map<int,int>hash1;
        
        for (int i = 0 ; i < 9 ; i++){
            if (i == 3 || i == 6){
                for (auto it : hash1){
                    hash1[it.first] = 0;
                }
            }
            for (int j = 0 ; j < 3 ; j++){
                if (board[i][j]!='.'){
                    hash1[board[i][j]-'0']++;
                    if (hash1[board[i][j]-'0']>1){
                        hash1[board[i][j]-'0'] = 0;
                        return false;
                    }
                }
            }
        }
        
        unordered_map<int,int>hash2;

        for (int i = 0 ; i < 9 ; i++){
            if (i == 3 || i == 6){
                for (auto it : hash2){
                    hash2[it.first] = 0;
                }
            }
            for (int j = 3 ; j < 6 ; j++){
                if (board[i][j]!='.'){
                    hash2[board[i][j]-'0']++;
                    if (hash2[board[i][j]-'0']>1){
                        hash2[board[i][j]-'0'] = 0;
                        return false;
                    }
                }
            }
        }
       
       unordered_map<int,int>hash3;

        for (int i = 0 ; i < 9 ; i++){
            if (i == 3 || i == 6){
                for (auto it : hash3){
                    hash3[it.first] = 0;
                }
            }
            for (int j = 6 ; j < 9 ; j++){
                if (board[i][j]!='.'){
                    hash3[board[i][j]-'0']++;
                    if (hash3[board[i][j]-'0']>1){
                        return false;
                    }
                }
            }
        }

        return true;
    }
};
