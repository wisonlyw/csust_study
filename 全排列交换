class Solution {
public:
  
    vector<vector<int>> permute(vector<int>& nums) {  
        vector<vector<int>> res;  
        backtrack(nums, 0, res);  
        return res;  
    }  

    void backtrack(vector<int>& nums, int start, vector<vector<int>>& res) {  
        if (start == nums.size()) {  
            res.push_back(nums);  
            return;  
        }  
        for (int i = start; i < nums.size(); i++) {  
            swap(nums[start], nums[i]); // Swap to create a new permutation  
            backtrack(nums, start + 1, res); // Recurse with the next position  
            swap(nums[start], nums[i]); // Backtrack to restore the original configuration  
        }  
    }  
}; 
