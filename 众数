#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 10;
int num[N]; // 全局数组，用于记录每个数字出现的频率

// 自定义排序函数：频率高的优先；频率相同，数值大的优先
bool cmp(int a, int b) {
    if (num[a] == num[b]) return a > b;
    else return num[a] > num[b];
}

int main() {
    int n;
    cin >> n;
    vector<int> v(n);
    vector<int> b; // 用于存储出现过的数字（去重后）
    
    // 1. 读入数据并统计频率
    for (int i = 0; i < n; i++) {
        cin >> v[i];
        num[v[i]]++;
        if (num[v[i]] == 1) { // 第一次出现才加入b数组
            b.push_back(v[i]);
        }
    }
    
    // 2. 对b数组按规则排序，得到初始的频率排名
    sort(b.begin(), b.end(), cmp);
    
    set<int> ans; // 用于存储所有可能的众数（自动去重）
    int m = b.size();
    
    // 3. 双重循环枚举所有操作 (i, j)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) continue; // 必须选择不同的下标
            
            int x = v[i], y = v[j];
            
            // 4. 模拟操作：更新频率
            num[x]--; num[y]--;
            num[x + 1]++; num[y - 1]++;
            
            // 5. 构建当前候选集
            vector<int> w;
            // 加入原频率最高的前几个数字（如前3名）
            for (int k = 0; k < min(m, 3); k++) {
                w.push_back(b[k]);
            }
            // 加入操作新产生的两个数字
            w.push_back(x + 1);
            w.push_back(y - 1);
            
            // 6. 对候选集排序，找到本次操作后的众数
            sort(w.begin(), w.end(), cmp);
            ans.insert(w[0]);
            
            // 7. 非常重要：恢复频率，为下一对(i,j)的枚举做准备
            num[x]++; num[y]++;
            num[x + 1]--; num[y - 1]--;
        }
    }
    
    // 8. 输出所有可能的众数
    for (auto it : ans) {
        cout << it << " ";
    }
    return 0;
}
