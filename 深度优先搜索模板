#include <iostream>  
#include <vector>  

using namespace std;  

class Graph {  
public:  
    Graph(int vertices);  
    void addEdge(int u, int v);  
    void dfs(int start);  

private:  
    void dfsUtil(int node, vector<bool>& visited); // 辅助DFS函数  
    int numVertices; // 图的顶点数  
    vector<vector<int>> adj; // 邻接表  
};  

Graph::Graph(int vertices) {  
    numVertices = vertices;  
    adj.resize(vertices);  
}  

// 添加边  
void Graph::addEdge(int u, int v) {  
    adj[u].push_back(v);  
    // 如果是无向图，则添加反向边  
    adj[v].push_back(u);  
}  

// 深度优先搜索辅助函数  
void Graph::dfsUtil(int node, vector<bool>& visited) {  
    visited[node] = true; // 标记当前节点为已访问  
    cout << node << " "; // 处理当前节点（例如打印）  

    // 遍历所有邻居  
    for (int neighbor : adj[node]) {  
        if (!visited[neighbor]) { // 如果邻居未被访问过  
            dfsUtil(neighbor, visited); // 递归访问邻居  
        }  
    }  
}  

// 深度优先搜索  
void Graph::dfs(int start) {  
    vector<bool> visited(numVertices, false); // 访问标记数组  
    dfsUtil(start, visited); // 从起始节点开始DFS  
}  

int main() {  
    Graph g(6);  
    g.addEdge(0, 1);  
    g.addEdge(0, 2);  
    g.addEdge(1, 3);  
    g.addEdge(1, 4);  
    g.addEdge(2, 5);  

    cout << "DFS starting from vertex 0: ";  
    g.dfs(0);  
    cout << endl;  

    return 0;  
}
