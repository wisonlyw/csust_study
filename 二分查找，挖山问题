#include <bits/stdc++.h>

using namespace std;



bool isPossible(long long mountainHeight , vector<long long>& workTimes , long long targetTime){
    long long Height_done = 0;
    for (int i = 0 ; i < workTimes.size() ; i++){
        long long left = 0;
        long long right = mountainHeight;
        long long mid;
        while (left<right){
            mid = (left+right+1)/2;
            long long require_time = workTimes[i]*(mid+1)*mid/2;
            if (require_time<=targetTime){
                left = mid;
            }else{
                right = mid-1;
            }
        }
        Height_done += left;
        if (Height_done>=mountainHeight){
            return true;
        }
    }
    return Height_done>=mountainHeight;
}

int minimumTimeToReduceMountain(long long mountainHeight, vector<long long>& workTimes) {
    long long left = 0, right = 1e18;
    long long result = right;
    while (left <= right) {
        long long mid =  (right + left) / 2;

        if (isPossible(mountainHeight, workTimes, mid)) {
            result = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    return result;
}


int main(){
    long long mountainHeight;
    vector<long long>workTimes;
    cin >> mountainHeight;
    while (1){
        long long workTime;
        cin >> workTime;
        workTimes.push_back(workTime);
        if (getchar()=='\n'){
            break;
        }
    }
    cout << minimumTimeToReduceMountain(mountainHeight, workTimes) << endl;
}

