/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTreesHelper(int start, int end){
        vector<TreeNode*> trees;
        if (start > end) {
            trees.push_back(nullptr); 
            return trees;
        }
        for (int i = start ; i <= end ; i++){
            vector<TreeNode*>left_trees = generateTreesHelper(start,i-1);
            vector<TreeNode*>right_trees = generateTreesHelper(i+1,end);
            for (TreeNode* left_tree : left_trees) {
                for (TreeNode* right_tree : right_trees) {
                    TreeNode* root = new TreeNode(i); // 为每个组合创建新根节点
                    root->left = left_tree;
                    root->right = right_tree;
                    trees.push_back(root);
                }
            }
        }
        return trees;
    }
    vector<TreeNode*> generateTrees(int n) {
       return generateTreesHelper(1,n);
    }
};
